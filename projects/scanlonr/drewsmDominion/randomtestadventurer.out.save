BEGIN ADVENTURER RANDOM TESTER 10000 ITERATIONS
TEST FAILED: 145!=146: Hand Count increased by 1 (+2 treasure, -1 card played)
TEST FAILED: 0!=1: Non treasure cards discarded
TEST FAILED: 254!=255: Hand Count increased by 1 (+2 treasure, -1 card played)
TEST FAILED: 0!=1: Non treasure cards discarded
TEST FAILED: 379!=380: Hand Count increased by 1 (+2 treasure, -1 card played)
TEST FAILED: 0!=1: Non treasure cards discarded
TEST FAILED: 168!=169: Hand Count increased by 1 (+2 treasure, -1 card played)
TEST FAILED: 0!=1: Non treasure cards discarded
TEST FAILED: 484!=485: Hand Count increased by 1 (+2 treasure, -1 card played)
TEST FAILED: 0!=1: Non treasure cards discarded
TEST FAILED: 70!=71: Hand Count increased by 1 (+2 treasure, -1 card played)
TEST FAILED: 0!=1: Non treasure cards discarded
TEST FAILED: 73!=74: Hand Count increased by 1 (+2 treasure, -1 card played)
TEST FAILED: 0!=1: Non treasure cards discarded
TEST FAILED: 346!=347: Hand Count increased by 1 (+2 treasure, -1 card played)
TEST FAILED: 0!=1: Non treasure cards discarded
TEST FAILED: 433!=434: Hand Count increased by 1 (+2 treasure, -1 card played)
TEST FAILED: 0!=1: Non treasure cards discarded
TEST FAILED: 145!=146: Hand Count increased by 1 (+2 treasure, -1 card played)
TEST FAILED: 0!=1: Non treasure cards discarded
END ADVENTURER RANDOM TESTER 10000 ITERATIONS
TESTING FOUND AT LEAST 10 BUGS

BEGIN COVERAGE RESULTS

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:80.77% of 78
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:0.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:95.83% of 24
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 237
Branches executed:0.00% of 160
Taken at least once:0.00% of 160
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'adventurerEffect'
Lines executed:87.50% of 16
Branches executed:100.00% of 12
Taken at least once:91.67% of 12
No calls

Function 'minionEffect'
Lines executed:0.00% of 24
Branches executed:0.00% of 18
Taken at least once:0.00% of 18
No calls

Function 'smithyEffect'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'stewardEffect'
Lines executed:0.00% of 10
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

Function 'embargoEffect'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

File 'dominion.c'
Lines executed:20.65% of 649
Branches executed:19.23% of 416
Taken at least once:16.35% of 416
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 731333 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
   731333:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 24%
branch  1 taken 76%
   176387:   10:    return 1;
unconditional  0 taken 100%
   554946:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 49%
branch  1 taken 51%
   271562:   12:    return -1;
unconditional  0 taken 100%
   283384:   13:  return 0;
unconditional  0 taken 100%
   731333:   14:}
unconditional  0 taken 100%
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
unconditional  0 never executed
    #####:   18:  return g;
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 10000 returned 100% blocks executed 83%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    10000:   44:  SelectStream(1);
    10000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    20000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
unconditional  0 never executed
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    10000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   220000:   57:  for (i = 0; i < 10; i++)
unconditional  0 taken 100%
branch  1 taken 91%
branch  2 taken 9%
unconditional  3 taken 100%
        -:   58:    {
  2200000:   59:      for (j = 0; j < 10; j++)
unconditional  0 taken 100%
branch  1 taken 91%
branch  2 taken 9%
unconditional  3 taken 100%
        -:   60:        {
  1900000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
unconditional  0 never executed
        -:   64:	    }
  1000000:   65:        }
unconditional  0 taken 100%
   100000:   66:    }
unconditional  0 taken 100%
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    10000:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
    10000:   75:      state->supplyCount[curse] = 10;
    10000:   76:    }
unconditional  0 taken 100%
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
unconditional  0 never executed
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
unconditional  0 never executed
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    10000:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
    10000:   89:      state->supplyCount[estate] = 8;
    10000:   90:      state->supplyCount[duchy] = 8;
    10000:   91:      state->supplyCount[province] = 8;
    10000:   92:    }
unconditional  0 taken 100%
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
unconditional  0 never executed
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    10000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    10000:  102:  state->supplyCount[silver] = 40;
    10000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   420000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
unconditional  0 taken 100%
branch  1 taken 95%
branch  2 taken 5%
unconditional  3 taken 100%
        -:  107:    {
  3300000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
unconditional  0 taken 100%
branch  1 taken 94%
branch  2 taken 6%
unconditional  3 taken 100%
        -:  109:	{
  1550000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   200000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
unconditional  0 never executed
    #####:  118:		  else{ state->supplyCount[i] = 12; }
unconditional  0 never executed
    #####:  119:		}
unconditional  0 never executed
        -:  120:	      else
        -:  121:		{
   100000:  122:		  state->supplyCount[i] = 10;
unconditional  0 taken 100%
        -:  123:		}
   100000:  124:	      break;
unconditional  0 taken 100%
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1450000:  128:	      state->supplyCount[i] = -1;
unconditional  0 taken 100%
        -:  129:	    }
  1450000:  130:	}
unconditional  0 taken 100%
        -:  131:
   200000:  132:    }
unconditional  0 taken 100%
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    60000:  138:  for (i = 0; i < numPlayers; i++)
unconditional  0 taken 100%
branch  1 taken 67%
branch  2 taken 33%
unconditional  3 taken 100%
        -:  139:    {
    20000:  140:      state->deckCount[i] = 0;
   160000:  141:      for (j = 0; j < 3; j++)
unconditional  0 taken 100%
branch  1 taken 75%
branch  2 taken 25%
unconditional  3 taken 100%
        -:  142:	{
    60000:  143:	  state->deck[i][j] = estate;
    60000:  144:	  state->deckCount[i]++;
    60000:  145:	}
unconditional  0 taken 100%
   320000:  146:      for (j = 3; j < 10; j++)
unconditional  0 taken 100%
branch  1 taken 88%
branch  2 taken 13%
unconditional  3 taken 100%
        -:  147:	{
   140000:  148:	  state->deck[i][j] = copper;
   140000:  149:	  state->deckCount[i]++;		
   140000:  150:	}
unconditional  0 taken 100%
    20000:  151:    }
unconditional  0 taken 100%
        -:  152:
        -:  153:  //shuffle player decks
    60000:  154:  for (i = 0; i < numPlayers; i++)
unconditional  0 taken 100%
branch  1 taken 67%
branch  2 taken 33%
unconditional  3 taken 100%
        -:  155:    {
    20000:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
unconditional  0 never executed
        -:  159:	}
    20000:  160:    }
unconditional  0 taken 100%
        -:  161:
        -:  162:  //draw player hands
    60000:  163:  for (i = 0; i < numPlayers; i++)
unconditional  0 taken 100%
branch  1 taken 67%
branch  2 taken 33%
unconditional  3 taken 100%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    20000:  166:      state->handCount[i] = 0;
    20000:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    20000:  173:    }
unconditional  0 taken 100%
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   560000:  176:  for (i = 0; i <= treasure_map; i++)
unconditional  0 taken 100%
branch  1 taken 96%
branch  2 taken 4%
unconditional  3 taken 100%
        -:  177:    {
   270000:  178:      state->embargoTokens[i] = 0;
   270000:  179:    }
unconditional  0 taken 100%
        -:  180:
        -:  181:  //initialize first player's turn
    10000:  182:  state->outpostPlayed = 0;
    10000:  183:  state->phase = 0;
    10000:  184:  state->numActions = 1;
    10000:  185:  state->numBuys = 1;
    10000:  186:  state->playedCardCount = 0;
    10000:  187:  state->whoseTurn = 0;
    10000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   120000:  192:  for (it = 0; it < 5; it++){
unconditional  0 taken 100%
branch  1 taken 83%
branch  2 taken 17%
unconditional  3 taken 100%
    50000:  193:    drawCard(state->whoseTurn, state);
    50000:  194:  }
unconditional  0 taken 100%
        -:  195:
    10000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    10000:  198:  return 0;
unconditional  0 taken 100%
    10000:  199:}
unconditional  0 taken 100%
        -:  200:
function shuffle called 20742 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    20742:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    20742:  209:  if (state->deckCount[player] < 1)
branch  0 taken 2%
branch  1 taken 98%
      371:  210:    return -1;
unconditional  0 taken 100%
    20371:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   637588:  214:  while (state->deckCount[player] > 0) {
unconditional  0 taken 100%
branch  1 taken 94%
branch  2 taken 6%
unconditional  3 taken 100%
   298423:  215:    card = floor(Random() * state->deckCount[player]);
   298423:  216:    newDeck[newDeckPos] = state->deck[player][card];
   298423:  217:    newDeckPos++;
 18883146:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 100%
branch  1 taken 97%
branch  2 taken 3%
unconditional  3 taken 100%
  9143150:  219:      state->deck[player][i] = state->deck[player][i+1];
  9143150:  220:    }
unconditional  0 taken 100%
   298423:  221:    state->deckCount[player]--;
        -:  222:  }
   637588:  223:  for (i = 0; i < newDeckPos; i++) {
unconditional  0 taken 100%
branch  1 taken 94%
branch  2 taken 6%
unconditional  3 taken 100%
   298423:  224:    state->deck[player][i] = newDeck[i];
   298423:  225:    state->deckCount[player]++;
   298423:  226:  }
unconditional  0 taken 100%
        -:  227:
    20371:  228:  return 0;
unconditional  0 taken 100%
    20742:  229:}
unconditional  0 taken 100%
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
unconditional  0 never executed
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
unconditional  0 never executed
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
unconditional  0 never executed
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
unconditional  0 never executed
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
unconditional  0 never executed
    #####:  270:}
unconditional  0 never executed
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
unconditional  0 never executed
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
unconditional  0 never executed
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
unconditional  0 never executed
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
unconditional  0 never executed
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
unconditional  0 never executed
    #####:  309:}
unconditional  0 never executed
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
unconditional  0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
unconditional  0 never executed
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  331:    }
unconditional  0 never executed
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  336:    }
unconditional  0 never executed
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  341:    }
unconditional  0 never executed
        -:  342:
    #####:  343:  return count;
unconditional  0 never executed
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
unconditional  0 never executed
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
unconditional  0 never executed
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
unconditional  0 never executed
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
unconditional  0 never executed
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
unconditional  0 never executed
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
unconditional  0 never executed
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
unconditional  0 never executed
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
unconditional  0 never executed
    #####:  408:    }
unconditional  0 never executed
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
unconditional  0 never executed
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
unconditional  0 never executed
    #####:  415:}
unconditional  0 never executed
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  430:    }
unconditional  0 never executed
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  441:    }
unconditional  0 never executed
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  452:    }
unconditional  0 never executed
        -:  453:
    #####:  454:  return score;
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
unconditional  0 never executed
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
unconditional  0 never executed
        -:  474:	}
    #####:  475:    }
unconditional  0 never executed
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
unconditional  0 never executed
    #####:  485:    }
unconditional  0 never executed
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
unconditional  0 never executed
    #####:  496:    }
unconditional  0 never executed
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
unconditional  0 never executed
    #####:  506:    }
unconditional  0 never executed
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
unconditional  0 never executed
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
unconditional  0 never executed
        -:  519:	}
    #####:  520:    }
unconditional  0 never executed
        -:  521:
    #####:  522:  return 0;
unconditional  0 never executed
        -:  523:}
        -:  524:
        -:  525://draws 1 card, shuffling the discard pile 1st, if needed
function drawCard called 231759 returned 100% blocks executed 91%
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
   231759:  529:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
   197588:  534:    for (i = 0; i < state->discardCount[player];i++){
unconditional  0 taken 100%
branch  1 taken 99%
branch  2 taken 1%
unconditional  3 taken 100%
    98423:  535:      state->deck[player][i] = state->discard[player][i];
    98423:  536:      state->discard[player][i] = -1;
    98423:  537:    }
unconditional  0 taken 100%
        -:  538:
      371:  539:    state->deckCount[player] = state->discardCount[player];
      371:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
      371:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
      371:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
      371:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
      371:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
      371:  560:    if (deckCounter == 0)
branch  0 taken 0%
branch  1 taken 100%
    #####:  561:      return -1;
unconditional  0 never executed
        -:  562:
      371:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      371:  564:    state->deckCount[player]--;
      371:  565:    state->handCount[player]++;//Increment hand count
      371:  566:  }
unconditional  0 taken 100%
        -:  567:
        -:  568:  else{
   231388:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
   231388:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
   231388:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   231388:  577:    state->deckCount[player]--;
   231388:  578:    state->handCount[player]++;//Increment hand count
unconditional  0 taken 100%
        -:  579:  }
        -:  580:
   231759:  581:  return 0;
unconditional  0 taken 100%
   231759:  582:}
unconditional  0 taken 100%
        -:  583:
function getCost called 0 returned 0% blocks executed 0%
        -:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
unconditional  0 never executed
        -:  590:    case estate:
    #####:  591:      return 2;
unconditional  0 never executed
        -:  592:    case duchy:
    #####:  593:      return 5;
unconditional  0 never executed
        -:  594:    case province:
    #####:  595:      return 8;
unconditional  0 never executed
        -:  596:    case copper:
    #####:  597:      return 0;
unconditional  0 never executed
        -:  598:    case silver:
    #####:  599:      return 3;
unconditional  0 never executed
        -:  600:    case gold:
    #####:  601:      return 6;
unconditional  0 never executed
        -:  602:    case adventurer:
    #####:  603:      return 6;
unconditional  0 never executed
        -:  604:    case council_room:
    #####:  605:      return 5;
unconditional  0 never executed
        -:  606:    case feast:
    #####:  607:      return 4;
unconditional  0 never executed
        -:  608:    case gardens:
    #####:  609:      return 4;
unconditional  0 never executed
        -:  610:    case mine:
    #####:  611:      return 5;
unconditional  0 never executed
        -:  612:    case remodel:
    #####:  613:      return 4;
unconditional  0 never executed
        -:  614:    case smithy:
    #####:  615:      return 4;
unconditional  0 never executed
        -:  616:    case village:
    #####:  617:      return 3;
unconditional  0 never executed
        -:  618:    case baron:
    #####:  619:      return 4;
unconditional  0 never executed
        -:  620:    case great_hall:
    #####:  621:      return 3;
unconditional  0 never executed
        -:  622:    case minion:
    #####:  623:      return 5;
unconditional  0 never executed
        -:  624:    case steward:
    #####:  625:      return 3;
unconditional  0 never executed
        -:  626:    case tribute:
    #####:  627:      return 5;
unconditional  0 never executed
        -:  628:    case ambassador:
    #####:  629:      return 3;
unconditional  0 never executed
        -:  630:    case cutpurse:
    #####:  631:      return 4;
unconditional  0 never executed
        -:  632:    case embargo: 
    #####:  633:      return 2;
unconditional  0 never executed
        -:  634:    case outpost:
    #####:  635:      return 5;
unconditional  0 never executed
        -:  636:    case salvager:
    #####:  637:      return 4;
unconditional  0 never executed
        -:  638:    case sea_hag:
    #####:  639:      return 4;
unconditional  0 never executed
        -:  640:    case treasure_map:
    #####:  641:      return 4;
unconditional  0 never executed
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
unconditional  0 never executed
    #####:  645:}
unconditional  0 never executed
        -:  646:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  int index;
    #####:  654:  int currentPlayer = whoseTurn(state);
    #####:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
    #####:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
    #####:  659:  int drawntreasure=0;
        -:  660:  int cardDrawn;
    #####:  661:  int z = 0;// this is the counter for the temp hand
    #####:  662:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  663:    nextPlayer = 0;
    #####:  664:  }
unconditional  0 never executed
        -:  665:  
        -:  666:  int result;   //return value from my refactored functions (drewsm)
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
        -:  670:    {
        -:  671:    //Adventurer is one of the cards I chose in Assignment1
        -:  672:      result = adventurerEffect(state, currentPlayer);
        -:  673:      //The above line to call adventurerEffect appears to have been
        -:  674:      //erroneously deleted in some prior commit. Adding back 2/18/2018
        -:  675:			
        -:  676:    case council_room:
        -:  677:      //+4 Cards
    #####:  678:      for (i = 0; i < 4; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  679:	{
    #####:  680:	  drawCard(currentPlayer, state);
    #####:  681:	}
unconditional  0 never executed
        -:  682:			
        -:  683:      //+1 Buy
    #####:  684:      state->numBuys++;
        -:  685:			
        -:  686:      //Each other player draws a card
    #####:  687:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  688:	{
    #####:  689:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  690:	    {
    #####:  691:	      drawCard(i, state);
    #####:  692:	    }
unconditional  0 never executed
    #####:  693:	}
unconditional  0 never executed
        -:  694:			
        -:  695:      //put played card in played card pile
    #####:  696:      discardCard(handPos, currentPlayer, state, 0);
        -:  697:			
    #####:  698:      return 0;
unconditional  0 never executed
        -:  699:			
        -:  700:    case feast:
        -:  701:      //gain card with cost up to 5
        -:  702:      //Backup hand
    #####:  703:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  704:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  705:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  706:      }
unconditional  0 never executed
        -:  707:      //Backup hand
        -:  708:
        -:  709:      //Update Coins for Buy
    #####:  710:      updateCoins(currentPlayer, state, 5);
    #####:  711:      x = 1;//Condition to loop on
    #####:  712:      while( x == 1) {//Buy one card
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  713:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  714:	  if (DEBUG)
        -:  715:	    printf("None of that card left, sorry!\n");
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  719:	  }
    #####:  720:	}
unconditional  0 never executed
    #####:  721:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  722:	  printf("That card is too expensive!\n");
        -:  723:
        -:  724:	  if (DEBUG){
        -:  725:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  726:	  }
    #####:  727:	}
unconditional  0 never executed
        -:  728:	else{
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
    #####:  734:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  735:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  736:
        -:  737:	  if (DEBUG){
        -:  738:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  739:	  }
        -:  740:
        -:  741:	}
        -:  742:      }     
        -:  743:
        -:  744:      //Reset Hand
    #####:  745:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  746:	state->hand[currentPlayer][i] = temphand[i];
    #####:  747:	temphand[i] = -1;
    #####:  748:      }
unconditional  0 never executed
        -:  749:      //Reset Hand
        -:  750:      			
    #####:  751:      return 0;
unconditional  0 never executed
        -:  752:			
        -:  753:    case gardens:
    #####:  754:      return -1;
unconditional  0 never executed
        -:  755:			
        -:  756:    case mine:
    #####:  757:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  758:
    #####:  759:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  760:	{
    #####:  761:	  return -1;
unconditional  0 never executed
        -:  762:	}
        -:  763:		
    #####:  764:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  765:	{
    #####:  766:	  return -1;
unconditional  0 never executed
        -:  767:	}
        -:  768:
    #####:  769:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  770:	{
    #####:  771:	  return -1;
unconditional  0 never executed
        -:  772:	}
        -:  773:
    #####:  774:      gainCard(choice2, state, 2, currentPlayer);
        -:  775:
        -:  776:      //discard card from hand
    #####:  777:      discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        -:  779:      //discard trashed card
    #####:  780:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  781:	{
    #####:  782:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  783:	    {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);			
    #####:  785:	      break;
unconditional  0 never executed
        -:  786:	    }
    #####:  787:	}
unconditional  0 never executed
        -:  788:			
    #####:  789:      return 0;
unconditional  0 never executed
        -:  790:			
        -:  791:    case remodel:
    #####:  792:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  793:
    #####:  794:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  795:	{
    #####:  796:	  return -1;
unconditional  0 never executed
        -:  797:	}
        -:  798:
    #####:  799:      gainCard(choice2, state, 0, currentPlayer);
        -:  800:
        -:  801:      //discard card from hand
    #####:  802:      discardCard(handPos, currentPlayer, state, 0);
        -:  803:
        -:  804:      //discard trashed card
    #####:  805:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  806:	{
    #####:  807:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  808:	    {
    #####:  809:	      discardCard(i, currentPlayer, state, 0);			
    #####:  810:	      break;
unconditional  0 never executed
        -:  811:	    }
    #####:  812:	}
unconditional  0 never executed
        -:  813:
        -:  814:
    #####:  815:      return 0;
unconditional  0 never executed
        -:  816:	
        -:  817:    
        -:  818:    //Smithy is one of the cards I chose in Assignment1
        -:  819:    case smithy:
    #####:  820:        result = smithyEffect(state, handPos, currentPlayer);
    #####:  821:        return result;
unconditional  0 never executed
        -:  822:		
        -:  823:    case village:
        -:  824:      //+1 Card
    #####:  825:      drawCard(currentPlayer, state);
        -:  826:			
        -:  827:      //+2 Actions
    #####:  828:      state->numActions = state->numActions + 2;
        -:  829:			
        -:  830:      //discard played card from hand
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
    #####:  832:      return 0;
unconditional  0 never executed
        -:  833:		
        -:  834:    case baron:
    #####:  835:      state->numBuys++;//Increase buys by 1!
    #####:  836:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  837:	int p = 0;//Iterator for hand!
    #####:  838:	int card_not_discarded = 1;//Flag for discard set!
    #####:  839:	while(card_not_discarded){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  840:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  841:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  842:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  843:	    state->discardCount[currentPlayer]++;
    #####:  844:	    for (;p < state->handCount[currentPlayer]; p++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  845:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  846:	    }
unconditional  0 never executed
    #####:  847:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  848:	    state->handCount[currentPlayer]--;
    #####:  849:	    card_not_discarded = 0;//Exit the loop
    #####:  850:	  }
unconditional  0 never executed
    #####:  851:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  852:	    if(DEBUG) {
        -:  853:	      printf("No estate cards in your hand, invalid choice\n");
        -:  854:	      printf("Must gain an estate if there are any\n");
        -:  855:	    }
    #####:  856:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  857:	      gainCard(estate, state, 0, currentPlayer);
    #####:  858:	      state->supplyCount[estate]--;//Decrement estates
    #####:  859:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  860:		isGameOver(state);
    #####:  861:	      }
unconditional  0 never executed
    #####:  862:	    }
unconditional  0 never executed
    #####:  863:	    card_not_discarded = 0;//Exit the loop
    #####:  864:	  }
unconditional  0 never executed
        -:  865:			    
        -:  866:	  else{
    #####:  867:	    p++;//Next card
unconditional  0 never executed
        -:  868:	  }
        -:  869:	}
    #####:  870:      }
unconditional  0 never executed
        -:  871:			    
        -:  872:      else{
    #####:  873:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  874:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  875:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  876:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  877:	    isGameOver(state);
    #####:  878:	  }
unconditional  0 never executed
    #####:  879:	}
unconditional  0 never executed
        -:  880:      }
        -:  881:	    
        -:  882:      
    #####:  883:      return 0;
unconditional  0 never executed
        -:  884:		
        -:  885:    case great_hall:
        -:  886:      //+1 Card
    #####:  887:      drawCard(currentPlayer, state);
        -:  888:			
        -:  889:      //+1 Actions
    #####:  890:      state->numActions++;
        -:  891:			
        -:  892:      //discard card from hand
    #####:  893:      discardCard(handPos, currentPlayer, state, 0);
    #####:  894:      return 0;
unconditional  0 never executed
        -:  895:
        -:  896:    //Minion is one of the cards I chose in Assignment1
        -:  897:    case minion:
    #####:  898:        result = minionEffect(choice1, choice2, state, handPos, currentPlayer);
    #####:  899:        return result;
unconditional  0 never executed
        -:  900:
        -:  901:    //Steward is one of the cards I chose in Assignment1
        -:  902:    case steward:
    #####:  903:        result = stewardEffect(choice1, choice2, choice3, state, handPos,
    #####:  904:                currentPlayer);
    #####:  905:        return result;
unconditional  0 never executed
        -:  906:		
        -:  907:    case tribute:
    #####:  908:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  909:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  910:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  911:	  state->deckCount[nextPlayer]--;
    #####:  912:	}
unconditional  0 never executed
    #####:  913:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  914:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  915:	  state->discardCount[nextPlayer]--;
    #####:  916:	}
unconditional  0 never executed
        -:  917:	else{
        -:  918:	  //No Card to Reveal
        -:  919:	  if (DEBUG){
        -:  920:	    printf("No cards to reveal\n");
        -:  921:	  }
        -:  922:	}
    #####:  923:      }
unconditional  0 never executed
        -:  924:	    
        -:  925:      else{
    #####:  926:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  927:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  928:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  929:	    state->deckCount[nextPlayer]++;
    #####:  930:	    state->discard[nextPlayer][i] = -1;
    #####:  931:	    state->discardCount[nextPlayer]--;
    #####:  932:	  }
unconditional  0 never executed
        -:  933:			    
    #####:  934:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  935:	} 
unconditional  0 never executed
    #####:  936:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  937:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  938:	state->deckCount[nextPlayer]--;
    #####:  939:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  940:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  941:	state->deckCount[nextPlayer]--;
unconditional  0 never executed
        -:  942:      }    
        -:  943:		       
    #####:  944:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  945:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  946:	state->playedCardCount++;
    #####:  947:	tributeRevealedCards[1] = -1;
    #####:  948:      }
unconditional  0 never executed
        -:  949:
    #####:  950:      for (i = 0; i <= 2; i ++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  951:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  952:	  state->coins += 2;
    #####:  953:	}
unconditional  0 never executed
        -:  954:		    
    #####:  955:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	  drawCard(currentPlayer, state);
    #####:  958:	}
unconditional  0 never executed
        -:  959:	else{//Action Card
    #####:  960:	  state->numActions = state->numActions + 2;
unconditional  0 never executed
        -:  961:	}
    #####:  962:      }
unconditional  0 never executed
        -:  963:	    
    #####:  964:      return 0;
unconditional  0 never executed
        -:  965:		
        -:  966:    case ambassador:
    #####:  967:      j = 0;		//used to check if player has enough cards to discard
        -:  968:
    #####:  969:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  970:	{
    #####:  971:	  return -1;				
unconditional  0 never executed
        -:  972:	}
        -:  973:
    #####:  974:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  return -1;
unconditional  0 never executed
        -:  977:	}
        -:  978:
    #####:  979:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  980:	{
    #####:  981:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  982:	    {
    #####:  983:	      j++;
    #####:  984:	    }
unconditional  0 never executed
    #####:  985:	}
unconditional  0 never executed
    #####:  986:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  987:	{
    #####:  988:	  return -1;				
unconditional  0 never executed
        -:  989:	}
        -:  990:
        -:  991:      if (DEBUG) 
        -:  992:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  993:
        -:  994:      //increase supply count for choosen card by amount being discarded
    #####:  995:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  996:			
        -:  997:      //each other player gains a copy of revealed card
    #####:  998:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  999:	{
    #####: 1000:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1001:	    {
    #####: 1002:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1003:	    }
unconditional  0 never executed
    #####: 1004:	}
unconditional  0 never executed
        -: 1005:
        -: 1006:      //discard played card from hand
    #####: 1007:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1008:
        -: 1009:      //trash copies of cards returned to supply
    #####: 1010:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1011:	{
    #####: 1012:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1013:	    {
    #####: 1014:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1015:		{
    #####: 1016:		  discardCard(i, currentPlayer, state, 1);
    #####: 1017:		  break;
unconditional  0 never executed
        -: 1018:		}
    #####: 1019:	    }
unconditional  0 never executed
    #####: 1020:	}			
unconditional  0 never executed
        -: 1021:
    #####: 1022:      return 0;
unconditional  0 never executed
        -: 1023:		
        -: 1024:    case cutpurse:
        -: 1025:
    #####: 1026:      updateCoins(currentPlayer, state, 2);
    #####: 1027:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1028:	{
    #####: 1029:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1030:	    {
    #####: 1031:	      for (j = 0; j < state->handCount[i]; j++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1032:		{
    #####: 1033:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1034:		    {
    #####: 1035:		      discardCard(j, i, state, 0);
    #####: 1036:		      break;
unconditional  0 never executed
        -: 1037:		    }
    #####: 1038:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1039:		    {
    #####: 1040:		      for (k = 0; k < state->handCount[i]; k++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1041:			{
        -: 1042:			  if (DEBUG)
        -: 1043:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1044:			}	
unconditional  0 never executed
    #####: 1045:		      break;
unconditional  0 never executed
        -: 1046:		    }		
    #####: 1047:		}
unconditional  0 never executed
        -: 1048:					
    #####: 1049:	    }
unconditional  0 never executed
        -: 1050:				
    #####: 1051:	}				
unconditional  0 never executed
        -: 1052:
        -: 1053:      //discard played card from hand
    #####: 1054:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1055:
    #####: 1056:      return 0;
unconditional  0 never executed
        -: 1057:
        -: 1058:    //Embargo is one of the cards I chose in Assignment1
        -: 1059:    case embargo:
    #####: 1060:        result = embargoEffect(choice1, state, handPos, currentPlayer);
    #####: 1061:        return result;
unconditional  0 never executed
        -: 1062:		
        -: 1063:    case outpost:
        -: 1064:      //set outpost flag
    #####: 1065:      state->outpostPlayed++;
        -: 1066:			
        -: 1067:      //discard card
    #####: 1068:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1069:      return 0;
unconditional  0 never executed
        -: 1070:		
        -: 1071:    case salvager:
        -: 1072:      //+1 buy
    #####: 1073:      state->numBuys++;
        -: 1074:			
    #####: 1075:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1076:	{
        -: 1077:	  //gain coins equal to trashed card
    #####: 1078:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1079:	  //trash card
    #####: 1080:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1081:	}
unconditional  0 never executed
        -: 1082:			
        -: 1083:      //discard card
    #####: 1084:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1085:      return 0;
unconditional  0 never executed
        -: 1086:		
        -: 1087:    case sea_hag:
    #####: 1088:      for (i = 0; i < state->numPlayers; i++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####: 1089:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1090:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1091:	  state->discardCount[i]++;
    #####: 1092:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1093:	}
unconditional  0 never executed
    #####: 1094:      }
unconditional  0 never executed
    #####: 1095:      return 0;
unconditional  0 never executed
        -: 1096:		
        -: 1097:    case treasure_map:
        -: 1098:      //search hand for another treasure_map
    #####: 1099:      index = -1;
    #####: 1100:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1101:	{
    #####: 1102:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1103:	    {
    #####: 1104:	      index = i;
    #####: 1105:	      break;
unconditional  0 never executed
        -: 1106:	    }
    #####: 1107:	}
unconditional  0 never executed
    #####: 1108:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
        -: 1110:	  //trash both treasure cards
    #####: 1111:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1112:	  discardCard(index, currentPlayer, state, 1);
        -: 1113:
        -: 1114:	  //gain 4 Gold cards
    #####: 1115:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1116:	    {
    #####: 1117:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1118:	    }
unconditional  0 never executed
        -: 1119:				
        -: 1120:	  //return success
    #####: 1121:	  return 1;
unconditional  0 never executed
        -: 1122:	}
        -: 1123:			
        -: 1124:      //no second treasure_map found in hand
    #####: 1125:      return -1;
unconditional  0 never executed
        -: 1126:    }
        -: 1127:	
    #####: 1128:  return -1;
unconditional  0 never executed
    #####: 1129:}
unconditional  0 never executed
        -: 1130:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1131:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1132:{	
        -: 1133:  //if card is not trashed, added to Played pile 
    #####: 1134:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1135:    {
        -: 1136:      //add card to played pile
    #####: 1137:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1138:      state->playedCardCount++;
    #####: 1139:    }
unconditional  0 never executed
        -: 1140:	
        -: 1141:  //set played card to -1
    #####: 1142:  state->hand[currentPlayer][handPos] = -1;
        -: 1143:	
        -: 1144:  //remove card from player's hand
        -: 1145:  //last card in hand array is played
    #####: 1146:  if ( handPos == (state->handCount[currentPlayer] - 1) )
branch  0 never executed
branch  1 never executed
        -: 1147:    {
        -: 1148:      //reduce number of cards in hand
    #####: 1149:      state->handCount[currentPlayer]--;
    #####: 1150:    }
unconditional  0 never executed
    #####: 1151:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1152:    {
        -: 1153:      //reduce number of cards in hand
    #####: 1154:      state->handCount[currentPlayer]--;
    #####: 1155:    }
unconditional  0 never executed
        -: 1156:  else 	
        -: 1157:    {
        -: 1158:      //replace discarded card with last card in hand
    #####: 1159:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1160:      //set last card to -1
    #####: 1161:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1162:      //reduce number of cards in hand
    #####: 1163:      state->handCount[currentPlayer]--;
unconditional  0 never executed
        -: 1164:    }
        -: 1165:	
    #####: 1166:  return 0;
unconditional  0 never executed
        -: 1167:}
        -: 1168:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1169:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1170:{
        -: 1171:  //Note: supplyPos is enum of choosen card
        -: 1172:	
        -: 1173:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1174:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1175:    {
    #####: 1176:      return -1;
unconditional  0 never executed
        -: 1177:    }
        -: 1178:	
        -: 1179:  //added card for [whoseTurn] current player:
        -: 1180:  // toFlag = 0 : add to discard
        -: 1181:  // toFlag = 1 : add to deck
        -: 1182:  // toFlag = 2 : add to hand
        -: 1183:
    #####: 1184:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1185:    {
    #####: 1186:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1187:      state->deckCount[player]++;
    #####: 1188:    }
unconditional  0 never executed
    #####: 1189:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1190:    {
    #####: 1191:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1192:      state->handCount[player]++;
    #####: 1193:    }
unconditional  0 never executed
        -: 1194:  else
        -: 1195:    {
    #####: 1196:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1197:      state->discardCount[player]++;
unconditional  0 never executed
        -: 1198:    }
        -: 1199:	
        -: 1200:  //decrease number in supply pile
    #####: 1201:  state->supplyCount[supplyPos]--;
        -: 1202:	 
    #####: 1203:  return 0;
unconditional  0 never executed
    #####: 1204:}
unconditional  0 never executed
        -: 1205:
function updateCoins called 10000 returned 100% blocks executed 85%
        -: 1206:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1207:{
        -: 1208:  int i;
        -: 1209:	
        -: 1210:  //reset coin count
    10000: 1211:  state->coins = 0;
        -: 1212:
        -: 1213:  //add coins for each Treasure card in player's hand
   120000: 1214:  for (i = 0; i < state->handCount[player]; i++)
unconditional  0 taken 100%
branch  1 taken 83%
branch  2 taken 17%
unconditional  3 taken 100%
        -: 1215:    {
    50000: 1216:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1217:	{
    40000: 1218:	  state->coins += 1;
    40000: 1219:	}
unconditional  0 taken 100%
    10000: 1220:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1221:	{
    #####: 1222:	  state->coins += 2;
    #####: 1223:	}
unconditional  0 never executed
    10000: 1224:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1225:	{
    #####: 1226:	  state->coins += 3;
    #####: 1227:	}	
unconditional  0 never executed
    50000: 1228:    }	
unconditional  0 taken 100%
        -: 1229:
        -: 1230:  //add bonus
    10000: 1231:  state->coins += bonus;
        -: 1232:
    10000: 1233:  return 0;
unconditional  0 taken 100%
        -: 1234:}
        -: 1235:
        -: 1236://My functions added in for Assignment 2
        -: 1237:
        -: 1238:/*******************************************************************************
        -: 1239: * Function: adventurerEffect
        -: 1240: * Description: Executes effects of playing the Adventurer card
        -: 1241: * Parameters: struct gameState *state - tracks critical aspects of the game
        -: 1242: *             int currentPlayer - specifies which player is current
        -: 1243: *
        -: 1244: * Pre-Conditions:  *state contains a valid game state
        -: 1245: * Post-Conditions: currentPlayer deck has been shuffled, if needed.
        -: 1246: *                  2 treasure cards from currentPlayer deck are added to the
        -: 1247: *                      player hand.
        -: 1248: *                  Other drawn cards are moved to player discard pile
        -: 1249:*******************************************************************************/
function adventurerEffect called 10000 returned 100% blocks executed 93%
        -: 1250:int adventurerEffect(struct gameState *state, int currentPlayer) {
    10000: 1251:    int drawntreasure=0;
        -: 1252:    int cardDrawn;
        -: 1253:    int temphand[MAX_HAND];
    10000: 1254:    int z = 0;// this is the counter for the temp hand
   383518: 1255:    while(drawntreasure<2){
unconditional  0 taken 100%
branch  1 taken 95%
branch  2 taken 5%
unconditional  3 taken 100%
        -: 1256:        //if the deck is empty we need to shuffle discard and add to deck
   181759: 1257:        if (state->deckCount[currentPlayer] <1){
branch  0 taken 1%
branch  1 taken 99%
      371: 1258:          shuffle(currentPlayer, state);
      371: 1259:        }
unconditional  0 taken 100%
   181759: 1260:        drawCard(currentPlayer, state);
        -: 1261:        //top card of hand is most recently drawn card.
   181759: 1262:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
   525459: 1263:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 96%
branch  1 taken 4%
branch  2 taken 96%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 96%
    20000: 1264:          drawntreasure++;
unconditional  0 taken 100%
        -: 1265:        else{
   161759: 1266:          temphand[z]=cardDrawn;
        -: 1267:          //this should just remove the top card (the most recently drawn one).
   161759: 1268:          state->handCount[currentPlayer]--;
unconditional  0 taken 100%
        -: 1269:          //BUG: commenting out the following line should mess up discarding
        -: 1270:          //z++;
        -: 1271:        }
        -: 1272:    }
    20000: 1273:    while(z-1>=0){
unconditional  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
unconditional  3 never executed
        -: 1274:        // discard all cards in play that have been drawn
    #####: 1275:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
    #####: 1276:        z=z-1;
        -: 1277:    }
    10000: 1278:    return 0;
unconditional  0 taken 100%
        -: 1279:}
        -: 1280:
        -: 1281:/*******************************************************************************
        -: 1282: * Function: minionEffect
        -: 1283: * Description: Executes effects of playing the Minion card
        -: 1284: * Parameters:  int choice1 - indicates if player chose 1st card effect
        -: 1285: *              int choice2 - indicates if player chose 2nd card effect
        -: 1286: *              struct gameState *state - tracks critical aspects of the game
        -: 1287: *              int currentPlayer - specifies which player is current
        -: 1288: *
        -: 1289: * Pre-Conditions:  *state contains a valid game state.
        -: 1290: *                  Player has specified valid choices.
        -: 1291: * Post-Conditions: Either Player has received +2 Coins, or
        -: 1292: *                  Player hand is discarded and 4 new cards added,
        -: 1293: *                  dependent on the values of choice1 and choice2
        -: 1294:*******************************************************************************/
function minionEffect called 0 returned 0% blocks executed 0%
        -: 1295:int minionEffect(int choice1, int choice2, struct gameState *state,
        -: 1296:        int handPos, int currentPlayer) {
        -: 1297:    int i, j;
        -: 1298:    //+1 action
    #####: 1299:    state->numActions++;
        -: 1300:
        -: 1301:    //discard card from hand
    #####: 1302:    discardCard(handPos, currentPlayer, state, 0);
        -: 1303:
    #####: 1304:    if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1305:      {
    #####: 1306:        state->coins = state->coins + 2;
    #####: 1307:      }
unconditional  0 never executed
        -: 1308:    // else, discard hand, redraw 4,
        -: 1309:    // other players with 5+ cards discard hand and draw 4
        -: 1310:    //BUG: changing 'else if' to just 'if' which could allow a player to select
        -: 1311:    //      both the first and second effects
        -: 1312:    //else if (choice2)
    #####: 1313:    if (choice2)
branch  0 never executed
branch  1 never executed
        -: 1314:      {
        -: 1315:        //discard hand
    #####: 1316:        while(numHandCards(state) > 0)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1317:          {
    #####: 1318:            discardCard(handPos, currentPlayer, state, 0);
        -: 1319:          }
        -: 1320:
        -: 1321:        //draw 4
    #####: 1322:        for (i = 0; i < 4; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1323:          {
    #####: 1324:            drawCard(currentPlayer, state);
    #####: 1325:          }
unconditional  0 never executed
        -: 1326:
        -: 1327:        //other players discard hand and redraw if hand size > 4
    #####: 1328:        for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1329:          {
    #####: 1330:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1331:              {
    #####: 1332:                if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1333:                  {
        -: 1334:                    //discard hand
    #####: 1335:                    while( state->handCount[i] > 0 )
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1336:                      {
    #####: 1337:                        discardCard(handPos, i, state, 0);
        -: 1338:                      }
        -: 1339:
        -: 1340:                    //draw 4
    #####: 1341:                    for (j = 0; j < 4; j++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1342:                      {
    #####: 1343:                        drawCard(i, state);
    #####: 1344:                      }
unconditional  0 never executed
    #####: 1345:                  }
unconditional  0 never executed
    #####: 1346:              }
unconditional  0 never executed
    #####: 1347:          }
unconditional  0 never executed
        -: 1348:
    #####: 1349:      }
unconditional  0 never executed
    #####: 1350:    return 0;
unconditional  0 never executed
        -: 1351:}
        -: 1352:
        -: 1353:/*******************************************************************************
        -: 1354: * Function: smithyEffect
        -: 1355: * Description: Executes effects of playing the Smithy card
        -: 1356: * Parameters:  struct gameState *state - tracks critical aspects of the game
        -: 1357: *              int handPos - Position in Player hand of card being played
        -: 1358: *              int currentPlayer - specifies which player is current
        -: 1359: *
        -: 1360: * Pre-Conditions:  *state contains a valid game state.
        -: 1361: *                  Player has specified valid choices.
        -: 1362: * Post-Conditions: 3 cards are added to Player hand from their deck, and
        -: 1363: *                  the Smithy card is discarded from the hand
        -: 1364:*******************************************************************************/
function smithyEffect called 0 returned 0% blocks executed 0%
        -: 1365:int smithyEffect(struct gameState *state, int handPos, int currentPlayer) {
        -: 1366:    int i;
        -: 1367:    
        -: 1368:    //+3 Cards
    #####: 1369:    for (i = 0; i < 3; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1370:      {
    #####: 1371:        drawCard(currentPlayer, state);
    #####: 1372:      }
unconditional  0 never executed
        -: 1373:
        -: 1374:    //discard card from hand
        -: 1375:    //BUG: changing the parameter passed as trashFlag
        -: 1376:    //discardCard(handPos, currentPlayer, state, 0);
    #####: 1377:    discardCard(handPos, currentPlayer, state, i);
    #####: 1378:    return 0;
unconditional  0 never executed
        -: 1379:}
        -: 1380:
        -: 1381:/*******************************************************************************
        -: 1382: * Function: stewardEffect
        -: 1383: * Description: Executes effects of playing the Steward card
        -: 1384: * Parameters:  int choice1 - indicates if player chose 1st card effect
        -: 1385: *              int choice2 - indicates if player chose 2nd card effect
        -: 1386: *              int choice3 - indicates if player chose 3rd card effect
        -: 1387: *              struct gameState *state - tracks critical aspects of the game
        -: 1388: *              int handPos - Position in Player hand of card being played
        -: 1389: *              int currentPlayer - specifies which player is current
        -: 1390: *
        -: 1391: * Pre-Conditions:  *state contains a valid game state.
        -: 1392: *                  Player has specified valid choices.
        -: 1393: * Post-Conditions: Either - 2 cards are added to Player hand, or
        -: 1394: *                  Player receives +2 Coin, or
        -: 1395: *                  2 cards from Player hand are trashed
        -: 1396:*******************************************************************************/
function stewardEffect called 0 returned 0% blocks executed 0%
        -: 1397:int stewardEffect(int choice1, int choice2, int choice3,
        -: 1398:        struct gameState *state, int handPos, int currentPlayer) {
    #####: 1399:    if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -: 1400:        //+2 cards
    #####: 1401:        drawCard(currentPlayer, state);
    #####: 1402:        drawCard(currentPlayer, state);
    #####: 1403:    }
unconditional  0 never executed
    #####: 1404:    else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -: 1405:        //+2 coins
    #####: 1406:        state->coins = state->coins + 2;
    #####: 1407:    }
unconditional  0 never executed
        -: 1408:    else {
        -: 1409:        //trash 2 cards in hand
    #####: 1410:        discardCard(choice2, currentPlayer, state, 1);
    #####: 1411:        discardCard(choice3, currentPlayer, state, 1);
unconditional  0 never executed
        -: 1412:    }
        -: 1413:
        -: 1414:    //discard card from hand
        -: 1415:    //BUG: removing the call to discardCard below
        -: 1416:    //discardCard(handPos, currentPlayer, state, 0);
    #####: 1417:    return 0;
unconditional  0 never executed
        -: 1418:}
        -: 1419:
        -: 1420:/*******************************************************************************
        -: 1421: * Function: embargoEffect
        -: 1422: * Description: Executes effects of playing the Embargo card
        -: 1423: * Parameters:  int choice1 - indicates which Supply pile Player wants to embargo
        -: 1424: *              struct gameState *state - tracks critical aspects of the game
        -: 1425: *              int handPos - Position in Player hand of card being played
        -: 1426: *              int currentPlayer - specifies which player is current
        -: 1427: *
        -: 1428: * Pre-Conditions:  *state contains a valid game state.
        -: 1429: *                  Player has specified valid choices.
        -: 1430: * Post-Conditions: Player receives +2 Coin,
        -: 1431: *                  the Embargo card is trashed, and
        -: 1432: *                  an Embargo token is added to the chosen Supply pile, if
        -: 1433: *                      that Supply pile is in play
        -: 1434:*******************************************************************************/
function embargoEffect called 0 returned 0% blocks executed 0%
        -: 1435:int embargoEffect(int choice1, struct gameState *state, int handPos,
        -: 1436:        int currentPlayer) {
        -: 1437:    //+2 Coins
    #####: 1438:    state->coins = state->coins + 2;
        -: 1439:
        -: 1440:    //see if selected pile is in play
    #####: 1441:    if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1442:      {
    #####: 1443:        return -1;
unconditional  0 never executed
        -: 1444:      }
        -: 1445:
        -: 1446:    //add embargo token to selected supply pile
    #####: 1447:    state->embargoTokens[choice1]++;
        -: 1448:
        -: 1449:    //trash card
    #####: 1450:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1451:    return 0;
unconditional  0 never executed
    #####: 1452:}
unconditional  0 never executed
        -: 1453:
        -: 1454://end of dominion.c

END COVERAGE RESULTS

